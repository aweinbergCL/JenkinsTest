
buildscript {
    ext {
        springBootVersion = '1.5.4.RELEASE'
        springCloudConnectorsVersion = '1.2.4.RELEASE'
        gradleReleasePluginVersion = '2.6.0'

        artifactBaseName = 'spring-music-test'

    }

    repositories {
        jcenter()
        mavenCentral()
        maven { url "https://repo.spring.io/plugins-release" }
    }
    repositories {
        mavenCentral()
        maven { url 'https://repo.corelogic.net/nexus/content/groups/m2/' }
    }

    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath("net.researchgate:gradle-release:${gradleReleasePluginVersion}")

    }
}

apply plugin: 'java'
apply plugin: 'net.researchgate.release'
apply plugin: 'eclipse-wtp'
apply plugin: 'idea'

apply plugin: 'org.springframework.boot'
apply plugin: 'maven-publish'
apply plugin: 'maven'

group = 'com.corelogic'
version = '0.0.6'

sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    mavenCentral()
}

dependencies {
    // Spring Boot
    compile "org.springframework.boot:spring-boot-starter-web"
    compile "org.springframework.boot:spring-boot-starter-actuator"
    compile "org.springframework.boot:spring-boot-starter-data-jpa"
    compile "org.springframework.boot:spring-boot-starter-data-mongodb"
    compile "org.springframework.boot:spring-boot-starter-data-redis"

    // Spring Cloud Connectors
    compile "org.springframework.cloud:spring-cloud-core:${springCloudConnectorsVersion}"
    compile "org.springframework.cloud:spring-cloud-spring-service-connector:${springCloudConnectorsVersion}"
    compile "org.springframework.cloud:spring-cloud-cloudfoundry-connector:${springCloudConnectorsVersion}"

    // JPA Persistence
    compile "commons-dbcp:commons-dbcp"
    runtime "com.h2database:h2"
    runtime "mysql:mysql-connector-java"
    runtime "org.postgresql:postgresql"
    runtime "com.microsoft.sqlserver:mssql-jdbc"

    // Webjars
    compile "org.webjars:bootstrap:3.1.1"
    compile "org.webjars:angularjs:1.2.16"
    compile "org.webjars:angular-ui:0.4.0-2"
    compile "org.webjars:angular-ui-bootstrap:0.10.0-1"
    compile "org.webjars:jquery:2.1.0-2"

    // Testing
    testCompile "junit:junit"
}

tasks.withType(Jar) {
    version = project.version
    baseName = project.ext.artifactBaseName
}

task sourceJar(type: Jar) {
    from sourceSets.main.allJava
}

artifacts {
    archives sourceJar
}

assemble.dependsOn(project.tasks.sourceJar)

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java

            artifact sourceJar {
                classifier "sources"
            }
        }
    }
}

if (project.hasProperty('nexusUrl') &&
        project.hasProperty('nexusUsername') &&
        project.hasProperty('nexusPassword')) {

    uploadArchives {
        outputs.upToDateWhen { false }
        repositories {
            mavenDeployer {
                repository(url: "${nexusUrl}/content/repositories/idap") {
                    authentication(userName: nexusUsername, password: nexusPassword)
                }
//                snapshotRepository(url: "${nexusUrl}/content/repositories/idap") {
//                    authentication(userName: nexusUsername, password: nexusPassword)
//                }
                pom.name = project.ext.artifactBaseName
                pom.groupId = project.group
                pom.version = project.version
            }
        }
    }
}


release {
    failOnCommitNeeded = false
    failOnUnversionedFiles = false
    preTagCommitMessage = '[Gradle Release Plugin] - Creating commit to set version to:'
    tagCommitMessage = '[Gradle Release Plugin] - Creating tag for version:'
    newVersionCommitMessage = '[Gradle Release Plugin] - Creating commit to increase version to:'
}

afterReleaseBuild.dependsOn uploadArchives


jar {
    version = "" // omit the version from the war file name
}